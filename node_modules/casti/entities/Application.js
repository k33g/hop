require('shelljs/global')
const {Success, Failure} = require('../libs/types')

const provision = require('../features/provision')

class Application {
  constructor({type, localPath, name, displayName, domain, organization, region, scale, addonsNames, environmentVariables, envvars, addons, applications, id}) {
    this.type = type
    this.localPath = localPath
    this.name = name
    this.displayName = displayName
    this.domain = domain
    this.organization = organization
    this.region = region
    this.scale = scale
    this.addonsNames = addonsNames
    this.environmentVariables = environmentVariables
    this.envvars = envvars
    this.addons = addons
    this.applications = applications
    this.id = id
  }

  static of({type, localPath, name, displayName, domain, organization, region, scale, addonsNames, environmentVariables, envvars, addons, applications, id}) {
    return new this({type, localPath, name, displayName, domain, organization, region, scale, addonsNames, environmentVariables, envvars, addons, applications, id})
  }

  getConfiguration() {
    // === read the Clever Cloud application configuration ===
    try {
      let conf = require(
        `${this.localPath}/${this.name}/.clever.json`
      ).apps[0]
      return Success.of(conf)
    } catch (error) {
      return Failure.of(error)
    }

  }

  extractEnvironmentVariables() {
    // === extract environment variables ===
    // useful to retrieve the uri of a database for example
    try {
      let res_env = exec([
          `cd ${this.localPath}/${this.name}; `
        , `clever env`
      ].join(''))
      let raw_envvars = res_env.code === 0 ? res_env.stdout.split('\n') : null
      let envvars = raw_envvars !== null  
        ? raw_envvars
          .filter(item => (!item.startsWith("#")) && (!item == ""))
          .map(item => {return {name:item.split("=")[0], value:item.split("=")[1]} })
        : null
      return Success.of(envvars)
    } catch (error) {
      return Failure.of(error)
    }
  }

  extractServices() {
    // === extract services (linked applications and addons) ===
    // useful to retrieve the uri of an fs-bucket for example
    // TODO: 👋 do something about id of addons
    try {
      let res_service = exec([
          `cd ${this.localPath}/${this.name}; `
        , `clever service`
      ].join(''))   

      if(res_service.code !==  0) {
        let message = "😡 Error when extracting services"
        console.log(message)
        console.log(res_service.stderr)        
        return Failure.of(message) 
      }
    
      let raw_services = res_service.stdout.split('\n').filter(line => line.length > 0)

      let addons = raw_services !== null  
        ? raw_services.filter(item => raw_services.indexOf(item) > raw_services.indexOf("Addons:"))
          .map(item => {
            return {
              name: item.trim().split(" ")[0],
              id: item.trim().split("(")[1].split(")")[0]
            }
          })
        : null    

      let applications = raw_services !== null  
        ? raw_services.filter(item => raw_services.indexOf(item) < raw_services.indexOf("Addons:") && raw_services.indexOf(item) > raw_services.indexOf("Applications:"))
          .map(item => {
            return {
              name: item.trim().split(" ")[0],
              id: item.trim().split("(")[1].split(")")[0]
            }
          })
        : null      
      
      return Success.of({applications, addons})
    } catch (error) {
      return Failure.of(error)
    }

  }

  create({directoryExists=false}) {
    try {
      
      // TODO: check that environmentVariables is an array
      // TODO: check that addons is an array

      // TODO: check error try catch etc ...
      if(directoryExists==false) {
        exec(`mkdir ${this.localPath}/${this.name}; `)
      }

      let cmdAddOns = this.addonsNames.map(name => `clever service link-addon ${name} --alias "${this.displayName}"; `)
      
      let cmd = [
          `echo 🤖 Application creation; `
        , `cd ${this.localPath}/${this.name}; `
        , `clever create -t ${this.type.name} "${this.displayName}" --org ${this.organization} --region ${this.region} --alias "${this.displayName}"; `
        , `echo "${this.environmentVariables.join("\n")}" | clever env import --alias "${this.displayName}"; `
        , `clever domain add ${this.domain}.cleverapps.io --alias "${this.displayName}"; `
        , `clever scale --flavor ${this.scale} --alias "${this.displayName}"; `
      ].concat(cmdAddOns).join('');
      
      console.log("🤖 creating the application at Clever Cloud...")
      let result = exec(cmd)

      if(result.code !== 0) { 
        let message = "😡 Error when creating the Clever Cloud application"
        console.log(message)
        console.log(result.stderr)        
        return Failure.of(message) 
      }

      // TODO: manage errors => better logging system

      // === read the Clever Cloud application configuration ===
      console.log("🤖 reading the application configuration file...")
      let conf = this.getConfiguration().when({
        Failure: error => {
          let message = "😡 Error when reading the Clever Cloud application configuration file"
          console.log(message)
          console.log(error)
          return undefined
        },
        Success: configuration => configuration
      })

      if(!conf) { return Failure.of("No configuration") }

      let app_id = conf.app_id // Clever application Id

      this.id = app_id

      // === extract environment variables ===
      console.log("🤖 reading the environment variables of the application...")
      let envvars = this.extractEnvironmentVariables().when({
        Failure: error => {
          let message = "😡 Error when reading the environment variables of the application"
          console.log(message)
          console.log(error)
          return undefined
        },
        Success: vars => vars
      })

      if(!envvars) { return Failure.of("No environment variable") }

      this.envvars = envvars

      // === extract services (linked applications and addons) ===
      console.log("🤖 reading services of the application...")
      let services = this.extractServices().when({
        Failure: error => {
          let message = "😡 Error when reading services of the application"
          console.log(message)
          console.log(error)
          return undefined
        },
        Success: servicesApplication => servicesApplication
      })

      if(!services) { return Failure.of("No service") }

      // === if you read this, all is allright 😃
      
      this.addons = services.addons
      this.applications = services.applications
      
      return Success.of(services) // {applications, addons}

    } catch (error) {
      return Failure.of(error.message)
    }

  }

  addEnvironmentVariable({name, value}) {
      
      let cmd = [
          `cd ${this.localPath}/${this.name}; `
        , `clever env set ${name} ${value} --alias "${this.displayName}"; `
      ].join('');

      let result = exec(cmd)

      if(result.code !== 0) { return Failure.of(result.stderr) }

      this.environmentVariables.push[`${name}=${value}`]
      this.envvars.push({name, value})

      return Success.of(this.envvars)
  }

  /*
    let mongodburi = letsChatApp.envvars.find(item => item.name == "MONGODB_ADDON_URI").value 
        
    letsChatApp.addEnvironmentVariable(
  */

  getEnvironmentVariable({name}) {
    let envar = this.envvars.find(item => item.name == name).value 
    if(envar) {
      return Success.of(envar)
    } else {
      return Failure.of(envar)
    }
  }

  /*
    let bucketHost = gitBucketApplication.envvars.find(item => item.name == "BUCKET_HOST").value 
    gitBucketApplication.addEnvironmentVariable(
      {name:`CC_FS_BUCKET`, value:`/storage:${bucketHost}`
    }).when({
      Failure: (err) => console.log("😡 unable to add variable", err),
      Success: envars => console.log("👏 bucket information added", envars)
    })           
  */
  createFSBucketFolder({path}) {
    let bucketHost = this.envvars.find(item => item.name == "BUCKET_HOST").value 
    return this.addEnvironmentVariable(
      {name:`CC_FS_BUCKET`, value:`/${path}:${bucketHost}`}
    ).when({
      Failure: (err) => Failure.of(err),
      Success: envars => Success.of(envars)
    })         
  }
  /*

    provision.shell(`
      cp -R ${process.cwd()}/assets/bob/* ${hubotApp.localPath}/${hubotApp.name}; 
    `)

    provision.shell(`
      # === copy gitbucket to the application directory ===
      cp ${process.cwd()}/assets/*.war ${gitBucketApplication.localPath}/${gitBucketApplication.name}
      echo "👋 gitbucket.war is copied"

      # === create clever configuration files ===
      cd ${gitBucketApplication.localPath}/${gitBucketApplication.name}
      mkdir clevercloud
      cd clevercloud
      cat > jar.json << EOF
      {"deploy": {"jarName": "gitbucket.war"}}
      EOF

  `).when({
      Failure: error => console.log(`😡 Huston? We had a problem when executing some tasks`, error),
      Success: result => {
        provision.gitInitialization(gitBucketApplication)
        provision.gitPush(gitBucketApplication) // deploy
      }
    })
  */
  copyAssets({from}) {
    return provision.shell(`
      # === copy assets to the application directory ===
      cp -R ${from} ${this.localPath}/${this.name}
    `).when({
      Failure: (err) => Failure.of(err),
      Success: res => Success.of(res)
    }) 
  }
    /*
      provision.shell(`
        # === download and copy gitbucket to the application directory ===
        curl -L https://github.com/gitbucket/gitbucket/releases/download/4.15.0/gitbucket.war --output ${gitBucketApplication.localPath}/${gitBucketApplication.name}/gitbucket.war         
      `)
    */
  downloadAssets({from, targetName}) {
    return provision.shell(`
      # === download and copy gitbucket to the application directory ===
      curl -L ${from} --output ${this.localPath}/${this.name}/${targetName}         
    `).when({
      Failure: (err) => Failure.of(err),
      Success: res => Success.of(res)
    }) 
  }

  createJsonJarFile({jarName}) {
    return provision.shell(`
      # === create clever configuration files ===
      cd ${this.localPath}/${this.name}
      mkdir clevercloud
      cd clevercloud
      cat > jar.json << EOF
      {"deploy": {"jarName": "${jarName}"}}
      EOF
    `).when({
      Failure: (err) => Failure.of(err),
      Success: res => Success.of(res)
    })     
  }

  /*
  provision.gitInitialization(gitBucketApplication)
  provision.gitPush(gitBucketApplication) // deploy
  */
  initializeGitRepository() {
    provision.gitInitialization(this)
  }

  pushToClever() {
    provision.gitPush(this) // deploy
  }

  







}

module.exports = Application
